<<<<<<< HEAD
[ SQL응용 ]_Portfolio_개발자_이유진

도서번호가 1인 도서의 이름
SELECT bookname FROM Book WHERE bookid=1;

1.
가격이 20000원 이상인 도서의 이름
SELECT bookname FROM book WHERE price >= 20000;

박지성의 총 구매액
SELECT SUM(saleprice)
FROM customer, orders
WHERE customer.custid = orders.custid
	AND customer.name LIKE '박지성';

박지성이 구매한 도서의 수
SELECT COUNT(*) FROM customer, orders
WHERE customer.custid = orders.custid
	AND customer.name LIKE '박지성';

박지성이 구매한 도서의 출판사 수
SELECT COUNT(DISTINCT publisher)
FROM customer, orders, book
WHERE customer.custid = orders.custid
AND orders.bookid = book.bookid
AND customer.name LIKE '박지성';

박지성이 구매한 도서의 이름, 가격, 정가와 판매가격의 차이
SELECT bookname, price, price-saleprice
FROM customer, orders, book
WHERE customer.custid = orders.custid
AND orders.bookid = book.bookid
AND customer.name LIKE '박지성';

박지성이 구매하지 않은 도서의 이름
SELECT bookname FROM book b1
minus
SELECT bookname FROM customer c, orders o, book b
	WHERE c.custid = o.custid AND o.bookid = b.bookid AND c.name LIKE '박지성';

2. 
마당서점 도서의 총 개수
SELECT COUNT(*) FROM book;

마당서점에 도서를 출고하는 출판사의 총 개수
SELECT COUNT(DISTINCT publisher) FROM book;

모든 고객의 이름, 주소
SELECT name, address
FROM customer;

2020년 7월 4일 ~ 7월 7일 사이에 주문받은 도서의 주문번호
SELECT *
FROM orders
WHERE orderdate BETWEEN '20200704' AND '20200707';

2020년 7월 4일 ~ 7월 7일 사이에 주문받은 도서를 제외한 도서의 주문번호
SELECT *
FROM orders
WHERE orderdate < '20200704' or orderdate > '20200707';

성이 김씨인 고객의 이름과 주소
SELECT name, address
FROM customer
WHERE name LIKE '김%';

성이 김씨고 이름이 아 로 끝나는 고객의 이름과 주소
SELECT name, address
FROM customer
WHERE name LIKE '김%아';

주문하지 않은 고객의 이름(부속질의 사용)
SELECT name FROM customer
WHERE name NOT IN
(SELECT name
FROM customer, orders
WHERE customer.custid = orders.custid);

주문 금액의 총액과 주문의 평균 금액
SELECT SUM(saleprice), AVG(saleprice)
FROM orders;

고객의 이름과 고객별 구매액
SELECT name, SUM(saleprice)
FROM customer, orders
WHERE customer.custid = orders.custid
GROUP BY name;

고객의 이름과 고객이 구매한 도서 목록
SELECT name, book.bookname
FROM customer, orders, book
WHERE customer.custid = orders.custid AND orders.bookid = book.bookid ;

도서의 가격(BOOK)과 판매가격(ORDERS)의 차이가 가장 많은 주문
SELECT *
FROM book, orders
WHERE book.bookid = orders.bookid
AND price-saleprice = (SELECT MAX(price-saleprice) FROM book, orders WHERE book.bookid = orders.bookid);

도서의 판매액 평균보다 자신의 구매액 평균이 더 높은 고객의 이름
SELECT name, AVG(saleprice)
FROM customer, orders
WHERE customer.custid = orders.custid
GROUP BY name
HAVING AVG(saleprice) > (SELECT AVG(saleprice) FROM orders);

3.
박지성이 구매한 도서의 출판사와 같은 출판사에서 도서를 구매한 고객의 이름
SELECT name FROM customer, orders, book
WHERE customer.custid = orders.custid
AND orders.bookid = book.bookid AND name NOT LIKE '박지성'
AND publisher IN (SELECT publisher FROM customer, orders, book 
		WHERE customer.custid = orders.custid
			AND orders.bookid = book.bookid
			AND name LIKE '박지성');

두 개 이상의 서로 다른 출판사에서 도서를 구매한 고객의 이름
SELECT name FROM customer c1
WHERE 2 <=
	(SELECT COUNT(DISTINCT publisher) FROM customer, orders, book
	WHERE customer.custid = orders.custid
		AND orders.bookid = book.bookid AND (name LIKE c1.name));

전체 고객의 30% 이상이 구매한 도서
SELECT bookname FROM book b1
WHERE ( (SELECT COUNT(book.bookid) FROM book, orders
	WHERE book.bookid = orders.bookid AND book.bookid = b1.bookid)
		>= 0.3 * (SELECT COUNT(*) FROM customer));

4.
새로운도서가 삽입이 안될 경우 필요한 데이터가 더 있는지 검색.
INSERT INTO BOOK VALUES (11, '스포츠세계', '대한미디어', 10000);

삼성당에서 출판한 도서 삭제
DELETE FROM book WHERE publisher LIKE '삼성당';

이상미디어 에서 출판한 도서 삭제
DELETE FROM book WHERE publisher LIKE '이상미디어';

출판사 대한미디어가 대한출판사로 이름 변경
UPDATE book SET publisher = '대한출판사' WHERE publisher LIKE '대한미디어';

테이블 생성
CREATE TABLE bookcompany(
name VARCHAR(20),
address VARCHAR(20),
begin DATE,
PRIMARY KEY (name));

테이블 수정
alter table bookcompany add webaddress varchar(30);

투플 삽입
insert into bookcompany(name, address, begin, webaddress) values('한빛아카데미', '서울시 마포구', '1993-01-01', 'http://hanbit.co.kr');

5. EXISTS 질의의 결과
SELECT *
FROM customer c1
WHERE NOT EXISTS (SELECT *
			FROM orders c2
			WHERE c1.custid = c2.custid);
질의의 결과는 무엇인가? 주문이 없는 고객
not을 지우면 결과는 무엇인가? 주문이 있는 고객

6. 학생이 10명 이상 가입한 동아리에 대하여 동아리와 제출한 총 과제수를 출력
SELECT 동아리, SUM(과제수)
	FROM 과제
	GROUP BY 동아리
	HAVING SUM(학생수) >= 10 ;

7. 00년 이후에 10권 이상의 책을 발행한 출판사의 이름을 중복없이 출력
SELECT 출판사명 FROM 도서
WHERE 발행년도 >= 2000
GROUP BY 출판사명 HAVING COUNT(도서번호) >= 10;

8. 투플의 개수 : 9

9.
SELECT B.부서명, COUNT(*)
FROM 직원 AS A, 부서 AS B
WHERE B.부서번호 = A.소속부서번호 AND A.급여 >= 40000 A
	A.소속부서번호 IN (SELECT C.소속부서번호
		FROM 직원 AS C
		GROUP BY C.소속부서번호
		HAVING COUNT(*) > 5 )
GROUP BY B.부서번호 ;

10.
ㄱ. CHECK    ㄴ. IN

11.
모든 극장의 이름과 위치를 보이시오
SELECT 극장이름, 위치
FROM 극장;

잠실에 있는 극장을 보이시오
SELECT * FROM 극장
WHERE 위치 LIKE '잠실';

잠실에 사는 고객의 이름을 오름차순으로 보이시오
SELECT 고객번호,이름,주소
FROM 고객
WHERE 주소 LIKE '잠실'
ORDER BY 이름 ;

가격이 6000원 이하인 영화의 극장번호, 상영관번호, 영화제목을 보이시오
SELECT 극장번호, 상영관번호, 영화제목
FROM 상영관
WHERE 가격 <= 6000;

극장 위치와 고객의 주소가 같은 고객들을 보이시오
SELECT 고객.이름, 극장.위치
FROM 고객, 극장
WHERE 고객.주소 LIKE 극장.위치;

극장의 수는 몇 개인가?
SELECT COUNT(극장번호)
FROM 극장;

상영되는 영화의 평균 가격을 얼마인가?
SELECT AVG(가격)
FROM 상영관;

2020년 9월 1일에 영화를 관람한 고객의 수는 얼마인가?
SELECT COUNT(이름)
FROM 고객, 예약
WHERE 예약.고객번호=고객.고객번호 AND 날짜 LIKE '2020-09-01';

대한극장에서 상영된 영화제목을 보이시오
SELECT 영화제목
FROM 극장, 상영관
WHERE 극장,극장번호=상영관.극장번호
	AND 극장이름 LIKE '대한';

대한극장에서 영화를 본 고객의 이름을 보이시오
SELECT 고객.이름
FROM 극장, 예약, 고객
WHERE 극장.극장번호=예약.극장번호 AND 예약.고객번호=고객.고객번호
AND 극장이름 LIKE '대한';

대한극장의 전체 수입을 보이시오
SELECT SUM(가격)
FROM 극장, 상영관, 예약
WHERE 극장.극장번호=상영관.극장번호 AND
	상영관.극장번호=예약.극장번호 AND 상영관.상영관번호=예약.상영관번호;

극장별 상영관 수를 보이시오
SELECT 극장번호, COUNT(*)
FROM 상영관
GROUP BY 극장번호;

잠실에 있는 극장의 상영관을 보이시오
SELECT * FROM 극장, 상영관
WHERE 극장.극장번호=상영관.극장번호 AND 위치 LIKE '잠실';

2013년 9월 1일에 극장별 평균 관람 고객의 수를 보이시오
SELECT 극장번호, COUNT(*)
FROM 예약
WHERE 날짜 LIKE '2013-09-01'
GROUP BY 극장번호;

2013년 9월 1일에 가장 많은 고객이 관람한 영화를 보이시오
SELECT 영화제목
FROM 상영관, 예약
WHERE 상영관.극장번호=예약.극장번호 AND 상영관.상영관번호=예약.상영관번호
	AND 날짜 LIKE '2013-09-01'
GROUP BY 예약.극장번호, 예약.상영관번호
HAVING COUNT(*) = ( SELECT MAX(*)
	FROM 상영관, 예약
	WHERE 상영관.극장번호=예약.극장번호
		AND 상영관.상영관번호=예약.상영관번호
		AND 날짜 LIKE '2013-09-01'
	GROUP BY 예약.극장번호, 예약.상영관번호);

DML
영화의 가격을 10% 인상하시오
UPDATE 상영관
SET 가격 = 가격 *1.1;

12.
테이블을 생성하는 CREATE 문과 데이터를 삽입하는 INSERT 문을 작성하시오
CREATE TABLE order (
number PRIMARY KEY,
custname CHAR(10),
salesperson CHAR(10),
amount NUMBER,
FOREIGN KEY(custname) REFERENCES Customer(name),
FOREIGN KEY(salesperson) REFERENCES Salesperson(name));

CREATE TABLE salesperson (
name PRIMARY KEY,
age CHAR(10),
salary CHAR(10));

CREATE TABLE Customer (
name PRIMARY KEY,
city CHAR(10),
industrytype CHAR(10));

INSERT INTO salesperson(name, age, salary) VALUES('TOM', '29', '40000');

INSERT INTO order(number, custname, salesperson, amount) VALUES(1, 'yujin', 'TOM', '4000');
INSERT INTO order(number, custname, salesperson, amount) VALUES(2, 'Ariel', 'TOM', '5000');
INSERT INTO order(number, custname, salesperson, amount) VALUES(3, 'Elsa', 'TOM', '1000');

INSERT INTO customer(name, city, industrytype) VALUES('youjin', 'Seoul', '개발자');
INSERT INTO customer(name, city, industrytype) VALUES('Ariel', 'LA', '학생');
INSERT INTO customer(name, city, industrytype) VALUES('Elsa', 'LA', '학생');

모든 판매원의 이름과 급여를 보이시오
SELECT (DISTINCT) name, salary
FROM salesperson;

나이가 30세 미만인 판매원의 이름을 보이시오
SELECT name
FROM salesperson
WHERE age < 30;

'S'로 끝나는 도시에 사는 고객의 이름을 보이시오
SELECT name
FROM customer
WHERE city LIKE '%S';

주문을 한 고객의 수(서로 다른 고객만)를 보이시오
SELECT COUNT(DISTINCT custname)
FROM order;

판매원 각각에 대하여 주문의 수를 계산하시오
SELECT salesperson, COUNT(*)
FROM order
GROUP BY salesperson;

'LA'에 사는 고객으로부터 주문을 받은 판매원의 이름과 나이를 보이시오 (부속질의를 사용)
SELECT name, age
FROM salesperson
WHERE name IN
	(SELECT salesperson FROM order WHERE custname IN
		(SELECT name FROM customer WHERE city LIKE 'LA') );

'LA'에 사는 고객으로부터 주문을 받은 판매원의 이름과 나이를 보이시오 (조인을 사용)
SELECT salesperson, age
FROM salesperson, order, customer
WHERE salesperson.name = order.salesperson
	AND order.custname = customer.name AND city='LA';

두 번 이상 주문을 받은 판매원의 이름을 보이시오
SELECT salesperson
FROM order
GROUP BY salesperson
HAVING COUNT(*) > 1;

판매원 'TOM'의 봉급을 45,000원으로 변경하는 SQL문을 작성하시오
UPDATE salesperson
SET salary=45000
WHERE name LIKE 'TOM';

13.
CREATE TABLE Department(
deptno int not null,
deptname varchar(20),
manager varchar(20),
primary key(deptno));

CREATE TABLE EMployee(
empno int not null,
name varchar(20),
phoneno int,
address varchar(20),
sex varchar(20),
position varchar(20),
deptno int,
primary key(empno),
foreign key(deptno) references Department(deptno));

CREATE TABLE Project(
projno int not null,
projname varchar(20),
deptno int,
primary key(projno),
foreign key(deptno) references Department(deptno));

CREATE TABLE Wokrs(
projno int not null,
empno int not null,
hoursworked int,
PRIMARY KEY(projno, empno),
foreign key(projno) references Project(projno),
foreign key(empno) references Employee(empno));

insert into department values(1, 'IT', '고남순');
insert into department values(2, 'Marketing', '홍길동');

insert into employee values(1, '김덕성', 01012341232, '서울', '여', 'Programmer', 1);
insert into employee values(2, '이서울', 01012323122, '서울', '남', 'Programmer', 1);
insert into employee values(3, '박연세', 01076851231, '대전', '여', 'Salesperson', 2);
insert into employee values(4, '홍길동', 01012341546, '서울', '남', 'Manager', 2);
insert into employee values(5, '고남순', 01012311112, '서울', '여', 'Manager', 1);

insert into Project values(1, '데이터베이스구축', 1);
insert into Project values(2, '시장조사', 2);

insert into Works values(1, 1, 3);
insert into Works values(1, 2, 1);
insert into Works values(2, 3, 1);
insert into Works values(2, 4, 5);
insert into Works values(1, 5, 1);

모든 사원의 이름을 보이시오
SELECT name
FROM employee;

여자 사원의 이름을 보이시오
SELECT name
FROM employee
WHERE sex LIKE '여';

팀장(manager)의 이름을 보이시오
SELECT name
FROM employee
WHERE empno IN (SELECT manager FROM department);

IT 부서에서 일하는 사원이 이름과 주소를 보이시오
SELECT name, address
FROM employee, department
WHERE emplyee.deptno=department.deptno and deptname LIKE 'IT';

홍길동 팀장(manager) 부서에서 일하는 사원의 수를 보이시오
SELECT count(name)
FROM employee
WHERE deptno IN (SELECT deptno FROM employee, department
		WHERE employee.empno = department.manager
		AND name LIKE '홍길동');

사원들이 일한 시간 수를 부서별, 사원 이름별 오름차순으로 보이시오
SELECT deptno, name, SUM(hours-worked)
FROM employee, works
WHERE emplyee.empno=works.empno
ORDER BY deptno, name;

두 명 이상의 사원이 참여한 프로젝트의 번호, 이름, 사원의 수를 보이시오
SELECT project.projno, project.projname, count(name) 사원수
FROM employee, project
WHERE project.deptno=employee.deptno
GROUP BY project.projno, project.projname
HAVING COUNT(*) >= 2;

세 명 이상의 사원이 있는 부서의 사원 이름을 보이시오
SELECT name
FROM employee, department
WHERE employee.deptno = department.deptno and
	deptname = (SELECT deptname FROM employee, department
		WHERE employee.deptno=department.deptno
		GROUP BY deptname
		HAVING COUNT(name) >= 3);

14.
사원의 이름과 업무를 출력하시오. 단, 사원의 이름은 사원이름, 업무는 사원업무 머리글이 나오도록 출력한다
SELECT ename AS "사원이름", job AS "사원업무"
FROM emp;

30번 부서에 근무하는 모든 사원의 이름과 급여를 출력하시오
SELECT ename, sal
FROM emp
WHERE deptno = 30;

사원 번호와 이름, 현재 급여와 10% 인상된 급여(열 이름은 인상된 급여)를 출력하시오.
SELECT empno, ename, sal, sal*0.1 "증가액", sal*1.1 as "인상된 급여"
FROM emp
ORDER BY empno;

S로 시작하는 모든 사원과 부서번호를 출력하시오
SELECT ename, deptno
FROM emp
WHERE ename LIKE 's%';

모든 사원의 최대 및 최소 급여, 합계 및 평균 급여를 출력하시오. 열 이름은 각각 MAX, MIN, SUM, AVG로 한다. 단, 소수점 이하는 반올림하여 정수로 출력한다.
SELECT MAX(sal) AS MAX, MIN(sal) AS MIN, sum(sal) AS SUM, ROUND(AVG(sal), 0) AS AVG
FROM emp;

업무이름과 업무별로 동일한 업무를 하는 사원의 수를 출력하시오. 열 이름은 각각 업무와 업무별 사원수로 한다.
SELECT job 업무, COUNT(ename) "업무별 사원수"
FROM emp
GROUP BY job;

사원의 최대 급여와 최소 급여의 차액을 출력하시오
SELECT MAX(sal)-MIN(sal)
FROM emp;

30번 부서의 구성원 수와 사원들 급여의 합계와 평균을 출력하시오
SELECT COUNT(empno), SUM(sal), AVG(sal)
FROM emp
WHERE deptno=30;

평균급여가 가장 높은 부서의 번호를 출력하시오
SELECT AVG(sal), dept.deptno
FROM emp, dept
WHERE emp.deptno = dept.deptno
GROUP BY dept.deptno
HAVING AVG(sal) >= ALL (SELECT (AVG(sal))
		FROM emp GROUP BY deptno);

세일즈맨을 제외하고, 각 업무별 사원들의 총 급여가 3000 이상인 각 업무에 대해서, 업무명과 각 업무별 평균 급여를 출력하되, 평균급여의 내림차순으로 출력하시오
SELECT job, AVG(sal)
FROM emp
WHERE job NOT LIKE 'salesman'
GROUP BY job
HAVING AVG(sal) >= 3000
ORDER BY AVG(sal) DESC;

전체 사원 가운데 직속상관이 있는 사원의 수를 출력하시오
SELECT COUNT(empno)
FROM emp
WHERE mgr IS NOT NULL;

EMP 테이블에서 이름, 급여, 커미션 금액, 총액(sal*12+comm)을 구하여 총액이 많은 순서대로 출력하시오. 단, 커미션이 NULL인 사람은 제외한다.
SELECT ename, sal, comm, sal+comm 총액
FROM emp
EXCEPT
SELECT ename, sal, comm, sal+comm
FROM emp
WHERE comm IS NULL
ORDER BY 총액;

각 부서별로 같은 업무를 하는 사람의 인원수를 구하여 부서번호, 업무명, 인원수를 출력하시오
SELECT job, COUNT(empno) 인원수, deptno
FROM emp
WHERE deptno IN (SELECT deptno FROM emp)
GROUP BY job, deptno;

사원이 한 명도 없는 부서의 이름을 출력하시오
SELECT dept.deptno
FROM dept
MINUS
SELECT dept.deptno
FROM emp;

같은 업무를 하는 사람의 수가 4명 이상인 업무와 인원수를 출력하시오
SELECT job, COUNT(empno)
FROM emp
GROUP BY job
HAVING COUNT(empno) >= 4;

사원번호가 7400 이상 7600 이하인 사원의 이름을 출력하시오
SELECT ename
FROM emp
WHERE empno BETWEEN 7400 AND 7600;

사원의 이름과 사원의 부서이름을 출력하시오
SELECT ename, dname, dept.deptno
FROM emp, dept
WHERE emp.deptno=dept.deptno;

사원의 이름과 팀장의 이름을 출력하시오
SELECT e1.ename, e2.ename
FROM emp e1, emp e2
WHERE e1.mgr=e2.empno;

사원 SCOTT 보다 급여를 많이 받는 사람의 이름을 출력하시오
SELECT ename
FROM emp
WHERE sal > (SELECT sal FROM emp WHERE ename LIKE 'SCOTT');

사원 SCOTT가 일하는 부서번호 혹은 DALLAS에 있는 부서번호를 출력하시오
SELECT emp.deptno
FROM emp
WHERE ename LIKE 'SCOTT'
UNION
SELECT dept.deptno
FROM dept
WHERE loc LIKE 'DALLAS';
=======
[ SQL응용 ]_Portfolio_개발자_이유진

도서번호가 1인 도서의 이름
SELECT bookname FROM Book WHERE bookid=1;

1.
가격이 20000원 이상인 도서의 이름
SELECT bookname FROM book WHERE price >= 20000;

박지성의 총 구매액
SELECT SUM(saleprice)
FROM customer, orders
WHERE customer.custid = orders.custid
	AND customer.name LIKE '박지성';

박지성이 구매한 도서의 수
SELECT COUNT(*) FROM customer, orders
WHERE customer.custid = orders.custid
	AND customer.name LIKE '박지성';

박지성이 구매한 도서의 출판사 수
SELECT COUNT(DISTINCT publisher)
FROM customer, orders, book
WHERE customer.custid = orders.custid
AND orders.bookid = book.bookid
AND customer.name LIKE '박지성';

박지성이 구매한 도서의 이름, 가격, 정가와 판매가격의 차이
SELECT bookname, price, price-saleprice
FROM customer, orders, book
WHERE customer.custid = orders.custid
AND orders.bookid = book.bookid
AND customer.name LIKE '박지성';

박지성이 구매하지 않은 도서의 이름
SELECT bookname FROM book b1
minus
SELECT bookname FROM customer c, orders o, book b
	WHERE c.custid = o.custid AND o.bookid = b.bookid AND c.name LIKE '박지성';

2. 
마당서점 도서의 총 개수
SELECT COUNT(*) FROM book;

마당서점에 도서를 출고하는 출판사의 총 개수
SELECT COUNT(DISTINCT publisher) FROM book;

모든 고객의 이름, 주소
SELECT name, address
FROM customer;

2020년 7월 4일 ~ 7월 7일 사이에 주문받은 도서의 주문번호
SELECT *
FROM orders
WHERE orderdate BETWEEN '20200704' AND '20200707';

2020년 7월 4일 ~ 7월 7일 사이에 주문받은 도서를 제외한 도서의 주문번호
SELECT *
FROM orders
WHERE orderdate < '20200704' or orderdate > '20200707';

성이 김씨인 고객의 이름과 주소
SELECT name, address
FROM customer
WHERE name LIKE '김%';

성이 김씨고 이름이 아 로 끝나는 고객의 이름과 주소
SELECT name, address
FROM customer
WHERE name LIKE '김%아';

주문하지 않은 고객의 이름(부속질의 사용)
SELECT name FROM customer
WHERE name NOT IN
(SELECT name
FROM customer, orders
WHERE customer.custid = orders.custid);

주문 금액의 총액과 주문의 평균 금액
SELECT SUM(saleprice), AVG(saleprice)
FROM orders;

고객의 이름과 고객별 구매액
SELECT name, SUM(saleprice)
FROM customer, orders
WHERE customer.custid = orders.custid
GROUP BY name;

고객의 이름과 고객이 구매한 도서 목록
SELECT name, book.bookname
FROM customer, orders, book
WHERE customer.custid = orders.custid AND orders.bookid = book.bookid ;

도서의 가격(BOOK)과 판매가격(ORDERS)의 차이가 가장 많은 주문
SELECT *
FROM book, orders
WHERE book.bookid = orders.bookid
AND price-saleprice = (SELECT MAX(price-saleprice) FROM book, orders WHERE book.bookid = orders.bookid);

도서의 판매액 평균보다 자신의 구매액 평균이 더 높은 고객의 이름
SELECT name, AVG(saleprice)
FROM customer, orders
WHERE customer.custid = orders.custid
GROUP BY name
HAVING AVG(saleprice) > (SELECT AVG(saleprice) FROM orders);

3.
박지성이 구매한 도서의 출판사와 같은 출판사에서 도서를 구매한 고객의 이름
SELECT name FROM customer, orders, book
WHERE customer.custid = orders.custid
AND orders.bookid = book.bookid AND name NOT LIKE '박지성'
AND publisher IN (SELECT publisher FROM customer, orders, book 
		WHERE customer.custid = orders.custid
			AND orders.bookid = book.bookid
			AND name LIKE '박지성');

두 개 이상의 서로 다른 출판사에서 도서를 구매한 고객의 이름
SELECT name FROM customer c1
WHERE 2 <=
	(SELECT COUNT(DISTINCT publisher) FROM customer, orders, book
	WHERE customer.custid = orders.custid
		AND orders.bookid = book.bookid AND (name LIKE c1.name));

전체 고객의 30% 이상이 구매한 도서
SELECT bookname FROM book b1
WHERE ( (SELECT COUNT(book.bookid) FROM book, orders
	WHERE book.bookid = orders.bookid AND book.bookid = b1.bookid)
		>= 0.3 * (SELECT COUNT(*) FROM customer));

4.
새로운도서가 삽입이 안될 경우 필요한 데이터가 더 있는지 검색.
INSERT INTO BOOK VALUES (11, '스포츠세계', '대한미디어', 10000);

삼성당에서 출판한 도서 삭제
DELETE FROM book WHERE publisher LIKE '삼성당';

이상미디어 에서 출판한 도서 삭제
DELETE FROM book WHERE publisher LIKE '이상미디어';

출판사 대한미디어가 대한출판사로 이름 변경
UPDATE book SET publisher = '대한출판사' WHERE publisher LIKE '대한미디어';

테이블 생성
CREATE TABLE bookcompany(
name VARCHAR(20),
address VARCHAR(20),
begin DATE,
PRIMARY KEY (name));

테이블 수정
alter table bookcompany add webaddress varchar(30);

투플 삽입
insert into bookcompany(name, address, begin, webaddress) values('한빛아카데미', '서울시 마포구', '1993-01-01', 'http://hanbit.co.kr');

5. EXISTS 질의의 결과
SELECT *
FROM customer c1
WHERE NOT EXISTS (SELECT *
			FROM orders c2
			WHERE c1.custid = c2.custid);
질의의 결과는 무엇인가? 주문이 없는 고객
not을 지우면 결과는 무엇인가? 주문이 있는 고객

6. 학생이 10명 이상 가입한 동아리에 대하여 동아리와 제출한 총 과제수를 출력
SELECT 동아리, SUM(과제수)
	FROM 과제
	GROUP BY 동아리
	HAVING SUM(학생수) >= 10 ;

7. 00년 이후에 10권 이상의 책을 발행한 출판사의 이름을 중복없이 출력
SELECT 출판사명 FROM 도서
WHERE 발행년도 >= 2000
GROUP BY 출판사명 HAVING COUNT(도서번호) >= 10;

8. 투플의 개수 : 9

9.
SELECT B.부서명, COUNT(*)
FROM 직원 AS A, 부서 AS B
WHERE B.부서번호 = A.소속부서번호 AND A.급여 >= 40000 A
	A.소속부서번호 IN (SELECT C.소속부서번호
		FROM 직원 AS C
		GROUP BY C.소속부서번호
		HAVING COUNT(*) > 5 )
GROUP BY B.부서번호 ;

10.
ㄱ. CHECK    ㄴ. IN

11.
모든 극장의 이름과 위치를 보이시오
SELECT 극장이름, 위치
FROM 극장;

잠실에 있는 극장을 보이시오
SELECT * FROM 극장
WHERE 위치 LIKE '잠실';

잠실에 사는 고객의 이름을 오름차순으로 보이시오
SELECT 고객번호,이름,주소
FROM 고객
WHERE 주소 LIKE '잠실'
ORDER BY 이름 ;

가격이 6000원 이하인 영화의 극장번호, 상영관번호, 영화제목을 보이시오
SELECT 극장번호, 상영관번호, 영화제목
FROM 상영관
WHERE 가격 <= 6000;

극장 위치와 고객의 주소가 같은 고객들을 보이시오
SELECT 고객.이름, 극장.위치
FROM 고객, 극장
WHERE 고객.주소 LIKE 극장.위치;

극장의 수는 몇 개인가?
SELECT COUNT(극장번호)
FROM 극장;

상영되는 영화의 평균 가격을 얼마인가?
SELECT AVG(가격)
FROM 상영관;

2020년 9월 1일에 영화를 관람한 고객의 수는 얼마인가?
SELECT COUNT(이름)
FROM 고객, 예약
WHERE 예약.고객번호=고객.고객번호 AND 날짜 LIKE '2020-09-01';

대한극장에서 상영된 영화제목을 보이시오
SELECT 영화제목
FROM 극장, 상영관
WHERE 극장,극장번호=상영관.극장번호
	AND 극장이름 LIKE '대한';

대한극장에서 영화를 본 고객의 이름을 보이시오
SELECT 고객.이름
FROM 극장, 예약, 고객
WHERE 극장.극장번호=예약.극장번호 AND 예약.고객번호=고객.고객번호
AND 극장이름 LIKE '대한';

대한극장의 전체 수입을 보이시오
SELECT SUM(가격)
FROM 극장, 상영관, 예약
WHERE 극장.극장번호=상영관.극장번호 AND
	상영관.극장번호=예약.극장번호 AND 상영관.상영관번호=예약.상영관번호;

극장별 상영관 수를 보이시오
SELECT 극장번호, COUNT(*)
FROM 상영관
GROUP BY 극장번호;

잠실에 있는 극장의 상영관을 보이시오
SELECT * FROM 극장, 상영관
WHERE 극장.극장번호=상영관.극장번호 AND 위치 LIKE '잠실';

2013년 9월 1일에 극장별 평균 관람 고객의 수를 보이시오
SELECT 극장번호, COUNT(*)
FROM 예약
WHERE 날짜 LIKE '2013-09-01'
GROUP BY 극장번호;

2013년 9월 1일에 가장 많은 고객이 관람한 영화를 보이시오
SELECT 영화제목
FROM 상영관, 예약
WHERE 상영관.극장번호=예약.극장번호 AND 상영관.상영관번호=예약.상영관번호
	AND 날짜 LIKE '2013-09-01'
GROUP BY 예약.극장번호, 예약.상영관번호
HAVING COUNT(*) = ( SELECT MAX(*)
	FROM 상영관, 예약
	WHERE 상영관.극장번호=예약.극장번호
		AND 상영관.상영관번호=예약.상영관번호
		AND 날짜 LIKE '2013-09-01'
	GROUP BY 예약.극장번호, 예약.상영관번호);

DML
영화의 가격을 10% 인상하시오
UPDATE 상영관
SET 가격 = 가격 *1.1;

12.
테이블을 생성하는 CREATE 문과 데이터를 삽입하는 INSERT 문을 작성하시오
CREATE TABLE order (
number PRIMARY KEY,
custname CHAR(10),
salesperson CHAR(10),
amount NUMBER,
FOREIGN KEY(custname) REFERENCES Customer(name),
FOREIGN KEY(salesperson) REFERENCES Salesperson(name));

CREATE TABLE salesperson (
name PRIMARY KEY,
age CHAR(10),
salary CHAR(10));

CREATE TABLE Customer (
name PRIMARY KEY,
city CHAR(10),
industrytype CHAR(10));

INSERT INTO salesperson(name, age, salary) VALUES('TOM', '29', '40000');

INSERT INTO order(number, custname, salesperson, amount) VALUES(1, 'yujin', 'TOM', '4000');
INSERT INTO order(number, custname, salesperson, amount) VALUES(2, 'Ariel', 'TOM', '5000');
INSERT INTO order(number, custname, salesperson, amount) VALUES(3, 'Elsa', 'TOM', '1000');

INSERT INTO customer(name, city, industrytype) VALUES('youjin', 'Seoul', '개발자');
INSERT INTO customer(name, city, industrytype) VALUES('Ariel', 'LA', '학생');
INSERT INTO customer(name, city, industrytype) VALUES('Elsa', 'LA', '학생');

모든 판매원의 이름과 급여를 보이시오
SELECT (DISTINCT) name, salary
FROM salesperson;

나이가 30세 미만인 판매원의 이름을 보이시오
SELECT name
FROM salesperson
WHERE age < 30;

'S'로 끝나는 도시에 사는 고객의 이름을 보이시오
SELECT name
FROM customer
WHERE city LIKE '%S';

주문을 한 고객의 수(서로 다른 고객만)를 보이시오
SELECT COUNT(DISTINCT custname)
FROM order;

판매원 각각에 대하여 주문의 수를 계산하시오
SELECT salesperson, COUNT(*)
FROM order
GROUP BY salesperson;

'LA'에 사는 고객으로부터 주문을 받은 판매원의 이름과 나이를 보이시오 (부속질의를 사용)
SELECT name, age
FROM salesperson
WHERE name IN
	(SELECT salesperson FROM order WHERE custname IN
		(SELECT name FROM customer WHERE city LIKE 'LA') );

'LA'에 사는 고객으로부터 주문을 받은 판매원의 이름과 나이를 보이시오 (조인을 사용)
SELECT salesperson, age
FROM salesperson, order, customer
WHERE salesperson.name = order.salesperson
	AND order.custname = customer.name AND city='LA';

두 번 이상 주문을 받은 판매원의 이름을 보이시오
SELECT salesperson
FROM order
GROUP BY salesperson
HAVING COUNT(*) > 1;

판매원 'TOM'의 봉급을 45,000원으로 변경하는 SQL문을 작성하시오
UPDATE salesperson
SET salary=45000
WHERE name LIKE 'TOM';

13.
CREATE TABLE Department(
deptno int not null,
deptname varchar(20),
manager varchar(20),
primary key(deptno));

CREATE TABLE EMployee(
empno int not null,
name varchar(20),
phoneno int,
address varchar(20),
sex varchar(20),
position varchar(20),
deptno int,
primary key(empno),
foreign key(deptno) references Department(deptno));

CREATE TABLE Project(
projno int not null,
projname varchar(20),
deptno int,
primary key(projno),
foreign key(deptno) references Department(deptno));

CREATE TABLE Wokrs(
projno int not null,
empno int not null,
hoursworked int,
PRIMARY KEY(projno, empno),
foreign key(projno) references Project(projno),
foreign key(empno) references Employee(empno));

insert into department values(1, 'IT', '고남순');
insert into department values(2, 'Marketing', '홍길동');

insert into employee values(1, '김덕성', 01012341232, '서울', '여', 'Programmer', 1);
insert into employee values(2, '이서울', 01012323122, '서울', '남', 'Programmer', 1);
insert into employee values(3, '박연세', 01076851231, '대전', '여', 'Salesperson', 2);
insert into employee values(4, '홍길동', 01012341546, '서울', '남', 'Manager', 2);
insert into employee values(5, '고남순', 01012311112, '서울', '여', 'Manager', 1);

insert into Project values(1, '데이터베이스구축', 1);
insert into Project values(2, '시장조사', 2);

insert into Works values(1, 1, 3);
insert into Works values(1, 2, 1);
insert into Works values(2, 3, 1);
insert into Works values(2, 4, 5);
insert into Works values(1, 5, 1);

모든 사원의 이름을 보이시오
SELECT name
FROM employee;

여자 사원의 이름을 보이시오
SELECT name
FROM employee
WHERE sex LIKE '여';

팀장(manager)의 이름을 보이시오
SELECT name
FROM employee
WHERE empno IN (SELECT manager FROM department);

IT 부서에서 일하는 사원이 이름과 주소를 보이시오
SELECT name, address
FROM employee, department
WHERE emplyee.deptno=department.deptno and deptname LIKE 'IT';

홍길동 팀장(manager) 부서에서 일하는 사원의 수를 보이시오
SELECT count(name)
FROM employee
WHERE deptno IN (SELECT deptno FROM employee, department
		WHERE employee.empno = department.manager
		AND name LIKE '홍길동');

사원들이 일한 시간 수를 부서별, 사원 이름별 오름차순으로 보이시오
SELECT deptno, name, SUM(hours-worked)
FROM employee, works
WHERE emplyee.empno=works.empno
ORDER BY deptno, name;

두 명 이상의 사원이 참여한 프로젝트의 번호, 이름, 사원의 수를 보이시오
SELECT project.projno, project.projname, count(name) 사원수
FROM employee, project
WHERE project.deptno=employee.deptno
GROUP BY project.projno, project.projname
HAVING COUNT(*) >= 2;

세 명 이상의 사원이 있는 부서의 사원 이름을 보이시오
SELECT name
FROM employee, department
WHERE employee.deptno = department.deptno and
	deptname = (SELECT deptname FROM employee, department
		WHERE employee.deptno=department.deptno
		GROUP BY deptname
		HAVING COUNT(name) >= 3);

14.
사원의 이름과 업무를 출력하시오. 단, 사원의 이름은 사원이름, 업무는 사원업무 머리글이 나오도록 출력한다
SELECT ename AS "사원이름", job AS "사원업무"
FROM emp;

30번 부서에 근무하는 모든 사원의 이름과 급여를 출력하시오
SELECT ename, sal
FROM emp
WHERE deptno = 30;

사원 번호와 이름, 현재 급여와 10% 인상된 급여(열 이름은 인상된 급여)를 출력하시오.
SELECT empno, ename, sal, sal*0.1 "증가액", sal*1.1 as "인상된 급여"
FROM emp
ORDER BY empno;

S로 시작하는 모든 사원과 부서번호를 출력하시오
SELECT ename, deptno
FROM emp
WHERE ename LIKE 's%';

모든 사원의 최대 및 최소 급여, 합계 및 평균 급여를 출력하시오. 열 이름은 각각 MAX, MIN, SUM, AVG로 한다. 단, 소수점 이하는 반올림하여 정수로 출력한다.
SELECT MAX(sal) AS MAX, MIN(sal) AS MIN, sum(sal) AS SUM, ROUND(AVG(sal), 0) AS AVG
FROM emp;

업무이름과 업무별로 동일한 업무를 하는 사원의 수를 출력하시오. 열 이름은 각각 업무와 업무별 사원수로 한다.
SELECT job 업무, COUNT(ename) "업무별 사원수"
FROM emp
GROUP BY job;

사원의 최대 급여와 최소 급여의 차액을 출력하시오
SELECT MAX(sal)-MIN(sal)
FROM emp;

30번 부서의 구성원 수와 사원들 급여의 합계와 평균을 출력하시오
SELECT COUNT(empno), SUM(sal), AVG(sal)
FROM emp
WHERE deptno=30;

평균급여가 가장 높은 부서의 번호를 출력하시오
SELECT AVG(sal), dept.deptno
FROM emp, dept
WHERE emp.deptno = dept.deptno
GROUP BY dept.deptno
HAVING AVG(sal) >= ALL (SELECT (AVG(sal))
		FROM emp GROUP BY deptno);

세일즈맨을 제외하고, 각 업무별 사원들의 총 급여가 3000 이상인 각 업무에 대해서, 업무명과 각 업무별 평균 급여를 출력하되, 평균급여의 내림차순으로 출력하시오
SELECT job, AVG(sal)
FROM emp
WHERE job NOT LIKE 'salesman'
GROUP BY job
HAVING AVG(sal) >= 3000
ORDER BY AVG(sal) DESC;

전체 사원 가운데 직속상관이 있는 사원의 수를 출력하시오
SELECT COUNT(empno)
FROM emp
WHERE mgr IS NOT NULL;

EMP 테이블에서 이름, 급여, 커미션 금액, 총액(sal*12+comm)을 구하여 총액이 많은 순서대로 출력하시오. 단, 커미션이 NULL인 사람은 제외한다.
SELECT ename, sal, comm, sal+comm 총액
FROM emp
EXCEPT
SELECT ename, sal, comm, sal+comm
FROM emp
WHERE comm IS NULL
ORDER BY 총액;

각 부서별로 같은 업무를 하는 사람의 인원수를 구하여 부서번호, 업무명, 인원수를 출력하시오
SELECT job, COUNT(empno) 인원수, deptno
FROM emp
WHERE deptno IN (SELECT deptno FROM emp)
GROUP BY job, deptno;

사원이 한 명도 없는 부서의 이름을 출력하시오
SELECT dept.deptno
FROM dept
MINUS
SELECT dept.deptno
FROM emp;

같은 업무를 하는 사람의 수가 4명 이상인 업무와 인원수를 출력하시오
SELECT job, COUNT(empno)
FROM emp
GROUP BY job
HAVING COUNT(empno) >= 4;

사원번호가 7400 이상 7600 이하인 사원의 이름을 출력하시오
SELECT ename
FROM emp
WHERE empno BETWEEN 7400 AND 7600;

사원의 이름과 사원의 부서이름을 출력하시오
SELECT ename, dname, dept.deptno
FROM emp, dept
WHERE emp.deptno=dept.deptno;

사원의 이름과 팀장의 이름을 출력하시오
SELECT e1.ename, e2.ename
FROM emp e1, emp e2
WHERE e1.mgr=e2.empno;

사원 SCOTT 보다 급여를 많이 받는 사람의 이름을 출력하시오
SELECT ename
FROM emp
WHERE sal > (SELECT sal FROM emp WHERE ename LIKE 'SCOTT');

사원 SCOTT가 일하는 부서번호 혹은 DALLAS에 있는 부서번호를 출력하시오
SELECT emp.deptno
FROM emp
WHERE ename LIKE 'SCOTT'
UNION
SELECT dept.deptno
FROM dept
WHERE loc LIKE 'DALLAS';
>>>>>>> 83e8911d5b03848792ccdce73dfc4923585cf180
